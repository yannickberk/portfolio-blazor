@using BlazorApp.Models
@using BlazorApp.Services
@inject ISitePropertiesService SitePropertiesService
@inject ISocialIconsService SocialIconsService
@inject ILogger<Footer> Logger

<div id="contact">
    @if (property is null || icons is null)
    {
        <div class="social-icons-container">
            <p><em>Loading...</em></p>
        </div>
    }
    else
    {
        <div class="social-icons-container">
            @if (string.IsNullOrWhiteSpace(property.Email) is false)
            {
                <a href="mailto:@(property.Email)">
                    <img src="@icons.Email" alt="Email" class="social-icon" />
                </a>
            }
            @if (string.IsNullOrWhiteSpace(property.DevDotTo) is false)
            {
                <a href="https://dev.to/@(property.DevDotTo)" target="_blank" rel="noopener noreferrer">
                    <img src="@icons.DevDotTo" alt="Dev.to" class="social-icon" />
                </a>
            }
            @if (string.IsNullOrWhiteSpace(property.GitHub) is false)
            {
                <a href="https://github.com/@(property.GitHub)" target="_blank" rel="noopener noreferrer">
                    <img src="@icons.GitHub" alt="GitHub" class="social-icon" />
                </a>
            }
            @if (string.IsNullOrWhiteSpace(property.Instagram) is false)
            {
                <a href="https://instagram.com/@(property.Instagram)" target="_blank" rel="noopener noreferrer">
                    <img src="@icons.Instagram" alt="Instagram" class="social-icon" />
                </a>
            }
            @if (string.IsNullOrWhiteSpace(property.LinkedIn) is false)
            {
                <a href="https://linkedin.com/in/@(property.LinkedIn)" target="_blank" rel="noopener noreferrer">
                    <img src="@icons.LinkedIn" alt="LinkedIn" class="social-icon" />
                </a>
            }
            @if (string.IsNullOrWhiteSpace(property.Medium) is false)
            {
                <a href="https://medium.com/@@@(property.Medium)" target="_blank" rel="noopener noreferrer">
                    <img src="@icons.Medium" alt="Medium" class="social-icon" />
                </a>
            }
            @if (string.IsNullOrWhiteSpace(property.Twitter) is false)
            {
                <a href="https://twitter.com/@(property.Twitter)" target="_blank" rel="noopener noreferrer">
                    <img src="@icons.Twitter" alt="Twitter" class="social-icon" />
                </a>
            }
            @if (string.IsNullOrWhiteSpace(property.YouTube) is false)
            {
                <a href="https://youtube.com/@(property.YouTube)" target="_blank" rel="noopener noreferrer">
                    <img src="@icons.YouTube" alt="YouTube" class="social-icon" />
                </a>
            }
        </div>
        @if (!string.IsNullOrWhiteSpace(property.Name))
        {
            <p class="small footer-credit">Created by @property.Name</p>
        }
    }
</div>

@code {
    /// <summary>
    /// Gets or sets the primary color for the footer component.
    /// </summary>
    [Parameter]
    public string PrimaryColor { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the secondary color for the footer component.
    /// </summary>
    [Parameter]
    public string SecondaryColor { get; set; } = string.Empty;

    private SiteProperties? property;
    private SocialIcons? icons;

    /// <summary>
    /// Initializes the component by loading site properties and social icons data.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogDebug("Initializing Footer component");

            // Load data in parallel for better performance
            var propertyTask = SitePropertiesService.GetSitePropertiesAsync();
            var iconsTask = SocialIconsService.GetSocialIconsAsync();

            await Task.WhenAll(propertyTask, iconsTask).ConfigureAwait(false);

            property = await propertyTask;
            icons = await iconsTask;

            Logger.LogDebug("Footer component initialization completed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error occurred while initializing Footer component");
            
            // Ensure UI shows loading state on error
            property = null;
            icons = null;
        }
    }
}