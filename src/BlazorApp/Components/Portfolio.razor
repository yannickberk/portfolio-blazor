@using BlazorApp.Models
@using BlazorApp.Services
@inject IProjectService ProjectService
@inject IHeroImageService HeroImageService
@inject ILogger<Portfolio> Logger

<section class="light" id="portfolio">
    <h2>Portfolio</h2>
    <div class="portfolio-container">
    @if (projects is null)
    {
        <p><em>Loading...</em></p>
    }
    else if (projects.Count == 0)
    {
        <div class="empty-state">
            <p>No projects available at the moment.</p>
        </div>
    }
    else
    {
        <div class="portfolio-image-container">
            @if (hero is not null)
            {
                <img src="@(hero.Src)" class="portfolio-hero-image" 
                    alt="@(hero.Alt)" />
            }
        </div>
        <div class="container">
            @foreach (var project in projects)
            {
                <div class="box" key="@project.Title">
                    @if (!string.IsNullOrWhiteSpace(project.Url))
                    {
                        <a href="@project.Url" target="_blank" rel="noopener noreferrer">
                            <h3 class="project-title">@project.Title</h3>
                        </a>
                    }
                    else
                    {
                        <h3 class="project-title">@project.Title</h3>
                    }
                    <p class="small">@project.Description</p>
                </div>
            }
        </div>
    }
    </div>
</section>

@code {
    private IReadOnlyList<Project>? projects;
    private HeroImage? hero;

    /// <summary>
    /// Initializes the component by loading portfolio projects and hero image data.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogDebug("Initializing Portfolio component");

            // Load data in parallel for better performance
            var projectsTask = ProjectService.GetProjectsAsync();
            var heroTask = HeroImageService.GetHeroAsync(img => img.Name == "portfolio");

            await Task.WhenAll(projectsTask, heroTask).ConfigureAwait(false);

            projects = await projectsTask;
            hero = await heroTask;

            Logger.LogDebug("Portfolio component initialization completed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error occurred while initializing Portfolio component");
            
            // Ensure UI shows loading state on error
            projects = null;
            hero = null;
        }
    }
}
