name: Publish Blazor App to GitHub Pages

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, closed]
  push:
    branches:
      - main

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  deployments: write
  environments: write

# Concurrency control to prevent deployment conflicts
# - PR cleanup jobs get their own concurrency group (pages-cleanup-{PR_NUMBER})
#   to prevent cancellation when main branch deploys after merge
# - Regular deployments use the 'pages' group
# - cancel-in-progress is disabled for cleanup jobs to ensure they complete
concurrency:
  group: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && format('pages-cleanup-{0}', github.event.pull_request.number) || 'pages' }}
  cancel-in-progress: ${{ github.event_name != 'pull_request' || github.event.action != 'closed' }}

jobs:
  build_test_artifact:
    name: Build App
    # Skip build if PR is being closed
    if: github.event_name != 'pull_request' || github.event.action != 'closed'

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install npm dependencies
      shell: bash
      run: |
        cd src/BlazorApp
        npm install

    - name: Build Sass
      shell: bash
      run: |
        cd src/BlazorApp
        npm run sass:build

    - name: Restore NuGet packages
      shell: bash
      run: |
        dotnet restore .

    - name: Build solution
      shell: bash
      run: |
        dotnet build .

    - name: Test solution
      shell: bash
      run: |
        dotnet test . -c Release

    - name: Publish artifact
      shell: bash
      run: |
        dotnet publish src/BlazorApp -c Release -o published
        
    - name: Upload artifact for web
      uses: actions/upload-pages-artifact@v4
      with:
        path: published/wwwroot


  deploy:
    name: Deploy App to GitHub Pages
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    needs:
      - build_test_artifact

    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  pr-preview:
    name: Deploy PR Preview to GitHub Pages
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.action == 'reopened')
    needs:
      - build_test_artifact
    runs-on: ubuntu-latest
    environment:
      name: pr-${{ github.head_ref }}
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy PR Preview to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  cleanup-pr-preview:
    name: Cleanup PR Preview Environment
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Delete PR Preview Environment
        env:
          HEAD_REF: ${{ github.head_ref }}
        uses: actions/github-script@v7
        with:
          script: |
            // Use the same environment naming as pr-preview job
            const environment = `pr-${process.env.HEAD_REF}`;

            try {
              // Get the environment
              await github.rest.repos.getEnvironment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                environment_name: environment
              });

              // Delete the environment
              await github.rest.repos.deleteAnEnvironment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                environment_name: environment
              });

              console.log(`Successfully deleted environment: ${environment}`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`Environment ${environment} not found - may have been already deleted`);
              } else {
                console.error(`Error deleting environment: ${error.message}`);
                throw error;
              }
            }
