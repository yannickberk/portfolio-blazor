name: Cleanup Orphaned PR Preview Environments

on:
  # Run daily at 2 AM UTC to clean up orphaned environments
  schedule:
    - cron: '0 2 * * *'
  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: read
  deployments: write

jobs:
  identify-orphaned-environments:
    name: Identify Orphaned PR Preview Environments
    runs-on: ubuntu-latest
    outputs:
      orphaned_environments: ${{ steps.find-orphans.outputs.environments }}
    steps:
      - name: Find Orphaned Environments
        id: find-orphans
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Get all environments
            const { data: environments } = await github.rest.repos.getAllEnvironments({
              owner,
              repo
            });
            
            console.log(`Found ${environments.total_count} environments`);
            
            // Get all open PRs
            const openPRs = await github.paginate(
              github.rest.pulls.list,
              {
                owner,
                repo,
                state: 'open',
                per_page: 100
              }
            );
            
            // Build a set of expected PR environment names
            const expectedPREnvironmentNames = new Set(openPRs.map(pr => `pr-${pr.head.ref}`));
            console.log(`Found ${expectedPREnvironmentNames.size} open PRs`);
            
            const orphanedEnvironments = [];
            
            // Check each environment that looks like a PR preview
            for (const environment of environments.environments) {
              if (environment.name.startsWith('pr-')) {
                // If this environment is not associated with any open PR, it's orphaned
                if (!expectedPREnvironmentNames.has(environment.name)) {
                  console.log(`Found orphaned environment: ${environment.name}`);
                  orphanedEnvironments.push(environment.name);
                } else {
                  console.log(`Keeping environment ${environment.name} - PR is still open`);
                }
              }
            }
            
            console.log(`Found ${orphanedEnvironments.length} orphaned environment(s)`);
            core.setOutput('environments', JSON.stringify(orphanedEnvironments));
            return orphanedEnvironments;

  cleanup-orphaned-environments:
    name: Cleanup Orphaned Environment
    needs: identify-orphaned-environments
    if: needs.identify-orphaned-environments.outputs.orphaned_environments != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJson(needs.identify-orphaned-environments.outputs.orphaned_environments) }}
      fail-fast: false
      max-parallel: 5
    steps:
      - name: Delete Environment ${{ matrix.environment }}
        uses: strumwolf/delete-deployment-environment@v3
        with:
          # Note: Deleting environments requires a token with 'repo' scope.
          # The default GITHUB_TOKEN does not have permission to delete environments.
          # To enable this functionality, create a Personal Access Token (PAT) with 'repo' scope
          # and add it as a repository secret named 'ENV_CLEANUP_TOKEN'.
          # If the secret is not set, this step will be skipped.
          token: ${{ secrets.ENV_CLEANUP_TOKEN || secrets.GITHUB_TOKEN }}
          environment: ${{ matrix.environment }}
          onlyRemoveDeployments: false
        continue-on-error: true
